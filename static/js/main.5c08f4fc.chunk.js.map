{"version":3,"sources":["CustomArgs.js","useColorScheme.js","ColorSchemeToggle.js","App.js","index.js"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","useColorSchemeState","createPersistedState","ColorSchemeToggle","systemPrefersDark","useMediaQuery","query","undefined","isDark","setIsDark","useMemo","useEffect","document","documentElement","classList","add","remove","useColorScheme","React","createElement","GraphiQL","Button","label","title","onClick","fetcher","params","fetch","method","headers","Accept","body","JSON","stringify","then","response","text","responseBody","parse","e","App","props","handleEditQuery","setState","handleToggleExplorer","explorerIsOpen","state","graphiql","schema","getIntrospectionQuery","result","editor","getQueryEditor","setOption","options","extraKeys","handleInspectOperation","buildClientSchema","data","cm","mousePos","this","parsedQuery","console","error","operationKind","operationName","token","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operation","selector","el","querySelector","scrollIntoView","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","editorTheme","Toolbar","handlePrettifyQuery","handleToggleHistory","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c08f4fc.chunk.js","sourcesContent":["import GraphiQLExplorer from 'graphiql-explorer';\nimport { isEnumType, isWrappingType } from 'graphql';\n\nfunction unwrapOutputType(outputType) {\n  let unwrappedType = outputType;\n  while (isWrappingType(unwrappedType)) {\n    unwrappedType = unwrappedType.ofType;\n  }\n  return unwrappedType;\n}\n\nexport function makeDefaultArg(\n  parentField,\n  arg,\n) {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  if (\n    unwrappedType.name.startsWith('GitHub')\n    && unwrappedType.name.endsWith('Connection')\n    && (arg.name === 'first' || arg.name === 'orderBy')\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getDefaultScalarArgValue(\n  parentField,\n  arg,\n  argType,\n) {\n  const unwrappedType = unwrapOutputType(parentField.type);\n  switch (unwrappedType.name) {\n    case 'GitHubRepository':\n      if (arg.name === 'name') {\n        return { kind: 'StringValue', value: 'graphql-js' };\n      } if (arg.name === 'owner') {\n        return { kind: 'StringValue', value: 'graphql' };\n      }\n      break;\n    case 'NpmPackage':\n      if (arg.name === 'name') {\n        return { kind: 'StringValue', value: 'graphql' };\n      }\n      break;\n    default:\n      if (\n        isEnumType(argType)\n        && unwrappedType.name.startsWith('GitHub')\n        && unwrappedType.name.endsWith('Connection')\n      ) {\n        if (\n          arg.name === 'direction'\n          && argType\n            .getValues()\n            .map((x) => x.name)\n            .includes('DESC')\n        ) {\n          return { kind: 'EnumValue', value: 'DESC' };\n        } if (\n          arg.name === 'field'\n          && argType\n            .getValues()\n            .map((x) => x.name)\n            .includes('CREATED_AT')\n        ) {\n          return { kind: 'EnumValue', value: 'CREATED_AT' };\n        }\n      }\n      return GraphiQLExplorer.defaultValue(argType);\n  }\n  return GraphiQLExplorer.defaultValue(argType);\n}\n","import { useEffect, useMemo } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport createPersistedState from 'use-persisted-state';\n\nconst useColorSchemeState = createPersistedState('colorScheme');\n\nexport default function useColorScheme() {\n  const systemPrefersDark = useMediaQuery(\n    {\n      query: '(prefers-color-scheme: dark)',\n    },\n    undefined,\n  );\n  const [isDark, setIsDark] = useColorSchemeState();\n  const value = useMemo(\n    () => (isDark === undefined ? !!systemPrefersDark : isDark),\n    [isDark, systemPrefersDark],\n  );\n  useEffect(() => {\n    if (value) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [value]);\n  return {\n    isDark: value,\n    setIsDark,\n  };\n}\n","import React from 'react';\nimport { GraphiQL } from 'graphiql';\nimport useColorScheme from './useColorScheme';\n\nconst ColorSchemeToggle = () => {\n  const { isDark, setIsDark } = useColorScheme();\n\n  return React.createElement(GraphiQL.Button, {\n    label: 'Theme',\n    title: 'Toggle Dark Mode',\n    onClick: () => setIsDark(!isDark),\n  });\n};\n\nexport default ColorSchemeToggle;\n","import React, { Component } from 'react';\nimport GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport { buildClientSchema, getIntrospectionQuery, parse } from 'graphql';\n\nimport { makeDefaultArg, getDefaultScalarArgValue } from './CustomArgs';\n\nimport 'graphiql/graphiql.css';\nimport './App.css';\n\nimport ColorSchemeToggle from './ColorSchemeToggle';\n\nconst fetcher = (params) => fetch(\n  'https://serve.onegraph.com/dynamic?app_id=bc178799-292e-49df-8016-223abf5a07cb',\n  {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(params),\n  },\n)\n  .then((response) => response.text())\n  .then((responseBody) => {\n    try {\n      return JSON.parse(responseBody);\n    } catch (e) {\n      return responseBody;\n    }\n  });\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\nquery npmPackage {\n  npm {\n    package(name: \"onegraph-apollo-client\") {\n      name\n      homepage\n      downloads {\n        lastMonth {\n          count\n        }\n      }\n    }\n  }\n}\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.graphiql = null;\n    this.state = { schema: null, query: DEFAULT_QUERY, explorerIsOpen: true };\n  }\n\n  componentDidMount() {\n    fetcher({\n      query: getIntrospectionQuery(),\n    }).then((result) => {\n      const editor = this.graphiql.getQueryEditor();\n      editor.setOption('extraKeys', {\n        ...(editor.options.extraKeys || {}),\n        'Shift-Alt-LeftClick': this.handleInspectOperation,\n      });\n\n      this.setState({ schema: buildClientSchema(result.data) });\n    });\n  }\n\n  handleInspectOperation(\n    cm,\n    mousePos,\n  ) {\n    const { query } = this.state;\n    const parsedQuery = parse(query || '');\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    const token = cm.getTokenAt(mousePos);\n    const start = { line: mousePos.line, ch: token.start };\n    const end = { line: mousePos.line, ch: token.end };\n    const relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    const position = relevantMousePos;\n\n    const def = parsedQuery.definitions.find((definition) => {\n      if (!definition.loc) {\n        console.log('Missing location information for definition');\n        return false;\n      }\n\n      const { loc } = definition;\n      return loc.start <= position.start && loc.end >= position.end;\n    });\n\n    if (!def) {\n      console.error(\n        'Unable to find definition corresponding to mouse position',\n      );\n      return null;\n    }\n\n    let operationKind;\n    if (def.kind === 'OperationDefinition') {\n      operationKind = def.operation;\n    } else {\n      operationKind = def.kind === 'FragmentDefinition'\n        ? 'fragment'\n        : 'unknown';\n    }\n\n    let operationName;\n    if (def.kind === 'OperationDefinition' && !!def.name) {\n      operationName = def.name.value;\n    } else {\n      operationName = def.kind === 'FragmentDefinition' && !!def.name\n        ? def.name.value\n        : 'unknown';\n    }\n\n    const selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    const el = document.querySelector(selector);\n    if (el !== null) {\n      el.scrollIntoView();\n    }\n\n    return false;\n  }\n\n  handleEditQuery = (query) => this.setState({ query });\n\n  handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n\n  render() {\n    const { query, schema, explorerIsOpen } = this.state;\n\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={this.handleEditQuery}\n          onRunOperation={(operationName) => this.graphiql.handleRunQuery(operationName)}\n          explorerIsOpen={explorerIsOpen}\n          onToggleExplorer={this.handleToggleExplorer}\n          getDefaultScalarArgValue={getDefaultScalarArgValue}\n          makeDefaultArg={makeDefaultArg}\n        />\n        <GraphiQL\n          ref={(ref) => { this.graphiql = ref; }}\n          fetcher={fetcher}\n          schema={schema}\n          query={query}\n          onEditQuery={this.handleEditQuery}\n          editorTheme=\"dracula\"\n        >\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button\n              onClick={() => this.graphiql.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => this.graphiql.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n            <GraphiQL.Button\n              onClick={this.handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n            <ColorSchemeToggle />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}